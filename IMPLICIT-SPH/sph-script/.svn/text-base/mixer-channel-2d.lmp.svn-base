dimension          2


# 1) Initialization
# -----------------
# set parameters that need to be defined before atoms are created or read-in from a file.
# e.g., units, dimension, newton, processors, boundary, atom_style, atom_modify.

variable           lx equal 3.0
variable           ly equal 1.0

# discretization
variable           N equal 36
variable           dx equal ${ly}/${N}

# buf
variable           buf_inlet equal ${dx}*12
variable           buf_outlet equal ${dx}*12
variable           wall equal ${dx}*4

# box domain
variable           xmin equal -${lx}-${buf_inlet}
variable           xmax equal  ${lx}+${buf_outlet}+${dx}
variable           ymin equal -${ly}-${wall}
variable           ymax equal  ${ly}+${wall}

# patch 
variable           patchsize  equal 0.8
variable           patchbegin equal -${patchsize}*3
variable           patchend   equal  ${patchsize}*3

# smoothing length
variable           h equal 1.2*${dx}
variable           cut equal 3.0*${h} # cut length used in shift

# set the box
variable           zmin equal -${dx}/2.0
variable           zmax equal  ${dx}/2.0

# flow parameters
variable           Umax equal 2e7

variable           tstep equal 1.0*${dx}/${Umax}
variable           tfinal equal 1.0
variable           nrun equal ${tfinal}/${tstep}

newton             off
units              si
boundary           p f p

# skin setup; not really use
variable           delay equal 0

# atom
atom_style         isph

print              "----------------"
print              "N = ${N}"
print              "dx = ${dx}"
print              "h = ${h}"
print              "tstep = ${tstep}"
print              "tfinal = ${tfinal}"
print              "nrun = ${nrun}"
print              "----------------"

# 2) Atom definition
# ------------------
# 1. There are 3 ways to define atoms in LAMMPS.
# - read them in from a data or
# - restart file via the read_data or
# - read_restart commands.
# These files can contain molecular topology information.
#
# Or create atoms on a lattice (with no molecular topology).
# e.g., lattice, region, create_box, create_atoms.
# The entire set of atoms can be duplicated to make a larger simulation using the replicate command.

##############################################################################
# comment lattice, region, create_box, create_atoms if you want to read_restart

lattice            sq ${dx} origin 0.5 0.5 0.

#region            name   block       xlo      xhi        ylo       yhi        zlo       zhi units box
region             box    block ${xmin} ${xmax} ${ymin} ${ymax}  ${zmin} ${zmax} units box

create_box         4 box
create_atoms       1 region box

# 3) Settings
# -----------
# Once atoms and molecular topology are defined, a variety of settings can be specified:
# force field coefficients, simulation parameters, output options, etc.
#
# Force field coefficients are set by these commands (they can also be set in the read-in files):
# pair_coeff, bond_coeff, angle_coeff, dihedral_coeff, improper_coeff, kspace_style,
# dielectric, special_bonds.
#
# Various simulation parameters are set by these commands:
# neighbor, neigh_modify, group, timestep, reset_timestep, run_style, min_style, min_modify.
#
# Fixes impose a variety of boundary conditions, time integration, and diagnostic options.
# The fix command comes in many flavors.
#
# Various computations can be specified for execution during a simulation using the compute,
# compute_modify, and variable commands.
#
# Output options are set by the thermo, dump, and restart commands.

neighbor           0.0 bin
neigh_modify       every 1 delay ${delay} check yes

pair_style         isph/corrected
pair_coeff         * * mixer-channel.xml ${h}

# default initialize concentration[0]
compute            species all isph/concentration 0

# apply fix for type 1 particles: psi field particles
fix                1 all isph
fix                2 all isph/shift 0.04 0.0 ${cut}

## compute_concentration_name time_begin time_end(-1:infinite) concentration_value xmin xmax ymin ymax zmin zmax type(can list multiple)
fix                3 all isph/modify/type 1 3 ${xmin} -${lx} -${ly} ${ly} ${zmin} ${zmax}
fix                4 all isph/modify/type 4 3 ${xmin} -${lx} -${ly} ${ly} ${zmin} ${zmax}
fix                5 all isph/modify/concentration species 0 -1 0.0 ${xmin} -${lx} -${ly} ${ly} ${zmin} ${zmax} 1 3 4
fix                6 all isph/modify/concentration species 0 -1 1.0 ${xmin} -${lx} 0 ${ly} ${zmin} ${zmax} 1 3 4
fix                7 all isph/modify/type 3 1 -${lx} ${lx} -${ly} ${ly} ${zmin} ${zmax}
fix                8 all isph/modify/type 4 1 -${lx} ${lx} -${ly} ${ly} ${zmin} ${zmax}
fix                9 all isph/modify/type 1 4 ${lx} ${xmax} -${ly} ${ly} ${zmin} ${zmax}
fix               10 all isph/modify/type 3 4 ${lx} ${xmax} -${ly} ${ly} ${zmin} ${zmax}

# 4) Run a simulation
# -------------------
# A molecular dynamics simulation is run using the run command.
# Energy minimization (molecular statics) is performed using the minimize command.
# A parallel tempering (replica-exchange) simulation can be run using the temper command.


variable           var_wall   atom (abs(y)>${ly})
variable           var_fluid  atom (abs(x)<=${lx})&&(abs(y)<=${ly})
variable           var_inlet  atom (x<-${lx})&&(abs(y)<=${ly})
variable           var_outlet atom (x>${lx})&&(abs(y)<=${ly})

variable           var_patch atom (x>${patchbegin})&&(x<${patchend})
variable           var_upper atom (y>0)
variable           var_lower atom (y<0)
variable           var_even  atom ((floor((x-${patchbegin})/${patchsize})%2)==0)
variable           var_odd   atom ((floor((x-${patchbegin})/${patchsize})%2)==1)

group              solid  variable var_wall
group              fluid  variable var_fluid
group              inlet  variable var_inlet
group              outlet variable var_outlet

group              patch_range variable var_patch
group              patch_upper variable var_upper
group              patch_lower variable var_lower
group              patch_even  variable var_even
group              patch_odd   variable var_odd

group              fluid_all union fluid inlet outlet

group              wall_upper_patch_even intersect solid patch_upper patch_range patch_even
group              wall_lower_patch_even intersect solid patch_lower patch_range patch_even
group              wall_upper_patch_odd  intersect solid patch_upper patch_range patch_odd
group              wall_lower_patch_odd  intersect solid patch_lower patch_range patch_odd

set                group fluid type 1
set                group solid type 2
set                group inlet type 3
set                group outlet type 4

set                group solid isph_density 1.000000e-18
set                group fluid_all isph_density 1.000000e-21
set                group all isph_viscosity 1.000000e+10
set                group all isph_pressure 0.0
set                group all isph_dielectric 6.950000e-10

set                group wall_upper_patch_even isph_electric_potential_on_wall  1.931434e+00
set                group wall_upper_patch_odd  isph_electric_potential_on_wall -1.931434e+00
set                group wall_lower_patch_even isph_electric_potential_on_wall -1.931434e+00
set                group wall_lower_patch_odd  isph_electric_potential_on_wall  1.931434e+00

velocity           all set 0.0 0.0 0.0 units box

#
timestep           ${tstep}

# no need to dump out
variable           dumpfreq equal 100
dump               dump all custom ${dumpfreq} mixer-channel-2d.dump id type x y z vx vy pressure type psi psigradx psigrady c_species 
dump_modify        dump flush yes

run                5000 # ${nrun}
