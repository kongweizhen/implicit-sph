dimension          2

# 1) Initialization
# -----------------
# set parameters that need to be defined before atoms are created or read-in from a file.
# e.g., units, dimension, newton, processors, boundary, atom_style, atom_modify.

# geometry
variable           lxtmp equal 10.0
variable           ly equal 1.0
variable           r equal 0.2
variable           off equal 8.5

# discretization 
variable           N equal 30
variable           dx equal ${ly}/${N}
variable           lx equal round(${lxtmp}/${dx})*${dx}

print              "${N} ${lx} ${ly} ${r} ${off}" file flow-past-cylinder-2d.out
shell              octave flow-past-cylinder-2d.m

# smoothing length
variable           h equal 6.0*${dx}

# flow parameters
variable           Umax equal 20.0
variable           Umin equal 2.0

variable           tstep equal 1.0*${dx}/${Umax}
variable           tfinal equal 100.0
variable           nrun equal ${tfinal}/${tstep}

# boundary and timestep
newton             off
units              si
boundary           p f p

# skin setup; not really used
variable           delay equal 0

# atom
atom_style         isph

print              "----------------"
print              "dx = ${dx}"
print              "h = ${h}"
print              "tstep = ${tstep}"
print              "tfinal = ${tfinal}"
print              "nrun = ${nrun}"
print              "----------------"  

# 2) Atom definition
# ------------------
# 1. There are 3 ways to define atoms in LAMMPS. 
# - read them in from a data or 
# - restart file via the read_data or 
# - read_restart commands. 
# These files can contain molecular topology information. 
#
# Or create atoms on a lattice (with no molecular topology). 
# e.g., lattice, region, create_box, create_atoms. 
# The entire set of atoms can be duplicated to make a larger simulation using the replicate command. 

read_data          flow-past-cylinder-2d.data

variable           xmin equal -${lx}+${off}
variable           xmax equal  ${lx}+${off}
variable           ymin equal -${ly} # +${dx}*0.5
variable           ymax equal  ${ly} # -${dx}*0.5
variable           zmin equal -${dx}/2.0
variable           zmax equal  ${dx}/2.0

#region            name   block       xlo      xhi        ylo       yhi        zlo       zhi units box
region             box    block ${xmin} ${xmax} ${ymin} ${ymax}  ${zmin} ${zmax} units box

#create_box         2 box
lattice            sq ${dx} origin 0.5 0.5 0.
create_atoms       1 region box

group              fluid type 1
group              boundary type 2 3

variable           rcyl equal ${r}+${dx}*0.5

variable           var_cylinder atom (${rcyl}*${rcyl}>(x*x+y*y))
group              cylinder variable var_cylinder

group              dummy subtract cylinder boundary
delete_atoms       group dummy

set                group boundary isph_density 1.0
set                group fluid isph_density 1.0
set                group all isph_viscosity 0.1


# 3) Settings
# -----------
# Once atoms and molecular topology are defined, a variety of settings can be specified: 
# force field coefficients, simulation parameters, output options, etc.
#
# Force field coefficients are set by these commands (they can also be set in the read-in files): 
# pair_coeff, bond_coeff, angle_coeff, dihedral_coeff, improper_coeff, kspace_style, 
# dielectric, special_bonds.
#
# Various simulation parameters are set by these commands: 
# neighbor, neigh_modify, group, timestep, reset_timestep, run_style, min_style, min_modify.
#
# Fixes impose a variety of boundary conditions, time integration, and diagnostic options. 
# The fix command comes in many flavors.
#
# Various computations can be specified for execution during a simulation using the compute, 
# compute_modify, and variable commands.
#
# Output options are set by the thermo, dump, and restart commands. 

neighbor           0 bin
neigh_modify       every 1 delay ${delay} check yes

pair_style         isph/mls
pair_coeff         * * flow-past-cylinder.xml ${h}

variable           rsample equal ${h}*2
variable           xsample equal ${xmin}+${rsample}

compute            status all isph/status flow-past-cylinder.txt v ${xsample} 0.0 0.0 ${rsample}
compute            flowstat all isph/status/flow_past_cylinder flow-past-cylinder-stat.txt &
    ${r} -.5 .5 &
    0 0 0 z &
    1 0 0 &
    0 1 0 &
    3
compute            vorticity  all isph/velocity_curl
compute            divergence all isph/velocity_divergence

fix                1 all isph status 0.1 ${dx} ${Umin} 
fix                2 all isph/shift 0.01 0.02 
fix                3 all isph/quit status ${tfinal}

# 4) Run a simulation
# -------------------
# A molecular dynamics simulation is run using the run command. 
# Energy minimization (molecular statics) is performed using the minimize command. 
# A parallel tempering (replica-exchange) simulation can be run using the temper command. 

#
velocity           fluid set 0.0 0.0 0.0 units box
velocity           boundary set 0.0 0.0 0.0 units box

#
timestep           ${tstep}  

#
variable           dumpfreq equal 100

dump               dump all custom ${dumpfreq} flow-past-cylinder-2d.dump id type x y z vx vy pressure type c_divergence c_vorticity[3]
dump_modify        dump flush yes    

run                ${nrun}
